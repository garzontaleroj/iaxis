package axis.service.axis;

import axis.jdbc.PAC_IAX_DATOSCTASEGURO;
import axis.jdbc.PAC_IAX_LISTVALORES;
import axis.jdbc.PAC_IAX_PERSONA;
import axis.jdbc.PAC_IAX_PRODUCCION;
import axis.jdbc.PAC_IAX_RESCATES;
import axis.jdbc.PAC_IAX_SUP_FINAN;

import axis.mvc.control.AbstractDispatchAction;
import axis.mvc.control.axis.Axisctr038Action;
import axis.mvc.model.UsuarioBean;

import axis.util.Constantes;

import java.math.BigDecimal;

import java.sql.Date;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;


public class Axisctr038Service extends AxisBaseService {


    /*********************************************************************************************************************/
    /*********************************************** M�TODOS DE INICIALIZACION *******************************************/
    /*********************************************************************************************************************/

    /**
     * M�todo que se llama al inicio de este flujo.
     * 
     * @param request
     * @param thisAction
     */
    public void m_init(HttpServletRequest request, 
                       Axisctr038Action thisAction) {
        try {
        } catch (Exception e) {
            logger.error("Error", e);
            thisAction.guardarMensaje(request, "1000050", 
                                      new Object[] { e.toString() }, 
                                      Constantes.MENSAJE_ERROR);
        }
    }

    /**
     * M�todo que se llama al inicio de este flujo. En ella cargamos todos los campos de la p�liza seleccionada.
     * 
     * @param request
     * @param thisAction
     */
    public void m_form(HttpServletRequest request, 
                       Axisctr038Action thisAction) {

        logger.debug("Axisctr038Service m_form");
        UsuarioBean usuario = 
            (UsuarioBean)request.getSession().getAttribute(Constantes.USUARIO);
        HashMap formdata = (HashMap)request.getAttribute(Constantes.FORMDATA);
        List cuentas = new ArrayList();
        Map c;
        BigDecimal SSEGURO = getCampoNumerico(request, "SSEGURO");
       
        request.getSession().setAttribute("SSEGURO", SSEGURO);

        // TODO: NRIESGO SIEMPRE SER� 1
        BigDecimal NRIESGO = new BigDecimal("1");
        // TODO: CCAUSIN siempre ser� 4
        BigDecimal CCAUSIN = new BigDecimal("4");


        Map objetoPantalla = new HashMap();

        try {
            // Obtenemos fecha actual         
            // Date FECHA_ACTUAL =  (Date)fcGetFechaActual();
            Date FECHA_ACTUAL = 
                AxisBaseService.stringToSqlDate(getCampoTextual(request, 
                                                                "FECHA"));
            if ("true".equals(getCampoTextual(request, "BORRAR"))) {

                Object[] keySet = formdata.keySet().toArray();
                for (int i = 0; i < keySet.length; i++) {
                    formdata.remove(keySet[i]);
                }
                formdata.put("SSEGURO", SSEGURO);
                formdata.put("NRIESGO", NRIESGO);
                formdata.put("FECHA_ACTUAL", FECHA_ACTUAL);

                request.getSession().removeAttribute("axisctr_asegurados");
                request.getSession().removeAttribute("axisctr_tomadores");

            }


            if (SSEGURO != null) {
                BigDecimal inicializa = 
                    this.dbInicializaPoliza(request, usuario, SSEGURO);

                if (inicializa.intValue() == 0) {

                    Map datPolizaReturn = 
                        this.dbGetDatPoliza(request, usuario, SSEGURO);

                    if (!isEmpty(datPolizaReturn)){
                    
                        AbstractDispatchAction.topPila(request, "SPRODUC", datPolizaReturn.get("SPRODUC"));
                        objetoPantalla.putAll(datPolizaReturn);
                    }
                    
                    List asegurados = 
                        (List)tratarRETURNyMENSAJES(request, dbLeeAsegurados(usuario));
                    List tomadores = 
                        (List)tratarRETURNyMENSAJES(request, dbLeeTomadores(request, 
                                                                            usuario));
                    Map gestion = 
                        (Map)tratarRETURNyMENSAJES(request, dbLeeDatosGestion(usuario));
                    Map economicos = 
                        this.dbGetDatosEconomicos(request, usuario, SSEGURO, 
                                                  NRIESGO, FECHA_ACTUAL);
                    // Map simulacion = (Map)this.dbGetValorSimulacion(request,usuario,SSEGURO,NRIESGO,FECHA_ACTUAL,null,null) ;

                    // BigDecimal SPERSON = this.dbGetSperson(request,usuario);

                    // if(SPERSON!=null){
                    // cuentas = (List)tratarRETURNyMENSAJES(request,dbGetCuentasBancarias(usuario,SPERSON,null,null));
                    c = dbGetCuTmador(request, usuario);
                    if (!isEmpty(c)) {
                        cuentas = (List)tratarRETURNyMENSAJES(request, c);

                        //    }

                    }

                    List tipos_cuentas = 
                        (List)tratarRETURNyMENSAJES(request, dbGetTiposCuentas(usuario));


                    if (!isEmpty(gestion))
                        objetoPantalla.putAll(gestion);
                    if (!isEmpty(economicos))
                        objetoPantalla.putAll(economicos);
                    // if (!isEmpty(simulacion))
                    //     objetoPantalla.putAll(simulacion);


                    // guardamos datos
                    request.getSession().setAttribute("axisctr_asegurados", 
                                                      ((asegurados == null) ? 
                                                       new ArrayList() : 
                                                       asegurados));
                    request.getSession().setAttribute("axisctr_tomadores", 
                                                      ((tomadores == null) ? 
                                                       new ArrayList() : 
                                                       tomadores));
                    request.getSession().setAttribute("axisctr_cuentas", 
                                                      ((cuentas == null) ? 
                                                       new ArrayList() : 
                                                       cuentas));
                    request.getSession().setAttribute("axisctr_tipos_cuentas", 
                                                      ((tipos_cuentas == 
                                                        null) ? 
                                                       new ArrayList() : 
                                                       tipos_cuentas));
                    formdata.putAll(objetoPantalla);


                }
            }

        } catch (Exception e) {
            logger.error("Error en el servicio Axisctr038Service - m�todo m_form", 
                         e);
            thisAction.guardarMensaje(request, "1000050", 
                                      new Object[] { e.toString() }, 
                                      Constantes.MENSAJE_ERROR);
        }

        this.configForm(request, whoami(this));

    }

    /*********************************************************************************************************************/
    /************************************************ M�TODOS DE ACTUALIZACI�N *******************************************/
    /*********************************************************************************************************************/

    /**
     * M�todo que se encarga de la actualizaci�n de la pantalla y su posterior recalculo de primas 
     * en funci�n de la aportaci�n introducida
     * 
     * 
     * @param request
     * @param thisAction
     */
    public


    void m_tarifar(HttpServletRequest request) {
        logger.debug("Axisctr038Service m_emitirPropuesta");
        UsuarioBean usuario = 
            (UsuarioBean)request.getSession().getAttribute(Constantes.USUARIO);
        AjaxContainerService ajax = new AjaxContainerService();

        try {

            BigDecimal SSEGURO = getCampoNumerico(request, "SSEGURO");
            BigDecimal NRIESGO = getCampoNumerico(request, "NRIESGO");
            // Date FECHA_ACTUAL =  (Date)fcGetFechaActual();
            Date FECHA_ACTUAL = 
                AxisBaseService.stringToSqlDate(getCampoTextual(request, 
                                                                "FECHA"));
            BigDecimal IMPORTE = getCampoNumerico(request, "IMPORTE");

            logger.debug("Datos TARIFAR nriesgo - importe - sseguro:" + 
                        NRIESGO + "-" + IMPORTE + "-" + SSEGURO + "-" + 
                        FECHA_ACTUAL);
            Map map = 
                this.dbTarifar(request, usuario, SSEGURO, NRIESGO, FECHA_ACTUAL, 
                               IMPORTE);
            // BigDecimal resultado = (BigDecimal)ajax.rellenarPlAContenedorAjax (map);  
            // logger.debug(resultado);
            BigDecimal CAPGARAN = (BigDecimal)map.get("AECAPGARAN");
            // Map analizar = (Map)tratarRETURNyMENSAJES(request,map);
            // if(analizar!=null){
            ajax.rellenarPlAContenedorAjax(map, new String[] { "CAPITAL" });
            // }
            // ajax.guardarErrorAContenedorAjax("ERROR");


            /* Rellenar CAPGARAN a contenedor AJAX */
            Map CAPITAL = new HashMap();
            CAPITAL.put("CAPITAL", CAPGARAN);
            List RESULTADO = new ArrayList();
            RESULTADO.add(CAPITAL);
            ajax.guardarContenidoFinalAContenedorAjax(RESULTADO);


        } catch (Exception e) {
            logger.error("Error en el servicio Axisctr38Service - m�todo m_aceptar", 
                         e);
            ajax.rellenarExcepcionAContenedorAjax(e);
        } finally {
            request.setAttribute(Constantes.AJAXCONTAINER, 
                                 ajax.procesarContenedorAjax());
        }
    }

    /*********************************************************************************************************************/
    /************************************************** M�TODOS DE NAVEGACI�N ********************************************/
    /*********************************************************************************************************************/

    /**
     * Guarda la pantalla, realiza su validaci�n y determina la siguiente pantalla
     * a ejecutar.
     * @param request
     * @param thisAction
     */
    public void m_aceptar(HttpServletRequest request, 
                          AbstractDispatchAction thisAction) {
        UsuarioBean usuario = 
            (UsuarioBean)request.getSession().getAttribute(Constantes.USUARIO);
        HashMap formdata = (HashMap)request.getAttribute(Constantes.FORMDATA);

        AjaxContainerService ajax = new AjaxContainerService();

        try {
            String CUENTA = getCampoTextual(request, "CBANCAR");
            BigDecimal TIPO = getCampoNumerico(request, "CTIPBAN");
            BigDecimal SSEGURO = getCampoNumerico(request, "SSEGURO");
            BigDecimal NRIESGO = getCampoNumerico(request, "NRIESGO");
            // Date FECHA_ACTUAL =  (Date)fcGetFechaActual();
            Date FECHA_ACTUAL = 
                AxisBaseService.stringToSqlDate(getCampoTextual(request, 
                                                                "FECHA"));
            BigDecimal IMPORTE = getCampoNumerico(request, "IMPORTE");
            logger.debug("Datos ACEPTAR nriesgo - importe - sseguro - tipo:" + 
                        NRIESGO + "-" + IMPORTE + "-" + SSEGURO + "-" + TIPO);

            BigDecimal ccc = new BigDecimal("0");
            // Validamos que el n�mero de cuenta sea correcto
            if (TIPO.intValue() != 0) {
                Map resultado = this.dbAceptar(request, usuario, TIPO, CUENTA);
                ccc = (BigDecimal)ajax.rellenarPlAContenedorAjax(resultado);
            }

            if (BigDecimal.ZERO.equals(ccc)) {
                Map resultado_final = 
                    this.dbFinalizar(request, usuario, SSEGURO, NRIESGO, 
                                     FECHA_ACTUAL, IMPORTE, CUENTA);
                logger.debug(resultado_final);
                                
                // Esto rellenar� los MENSAJES en pantalla, as� que no nos preocupamos de si el RETURN es 0 � 1 
                ajax.rellenarPlAContenedorAjax (resultado_final, new String[] {"OSSEGURO"});      
                
                /* Rellenar SSEGURO a contenedor AJAX */
                     Map OSSEGURO = new HashMap();
                     OSSEGURO.put("OSSEGURO", SSEGURO);
                     List RESULTADO = new ArrayList();
                     RESULTADO.add (OSSEGURO);
                      
                 ajax.guardarContenidoFinalAContenedorAjax(RESULTADO);   
                 
              //  ajax.rellenarPlAContenedorAjax(resultado_final);
            }

        } catch (Exception e) {
            logger.error("Error en el servicio Axisctr38Service - m�todo m_aceptar", 
                         e);
            ajax.rellenarExcepcionAContenedorAjax(e);
        } finally {
            request.setAttribute(Constantes.AJAXCONTAINER, 
                                 ajax.procesarContenedorAjax());
        }

    }


    /**
     * Guarda la pantalla, realiza su validaci�n y determina la pantalla anterior
     * a ejecutar.
     * @param request
     * @param thisAction
     */
    public void m_anterior(HttpServletRequest request, 
                           AbstractDispatchAction thisAction) {

    }

    /**
     * M�todo que llama a la funci�n pl correspondiente para cargar los datos de una p�liza seleccionada.
     * 
     * @param request
     * @param usuario
     * @param SSEGURO
     * @return
     * @throws Exception
     */
    private Map dbGetDatPoliza(HttpServletRequest request, UsuarioBean usuario, 
                               BigDecimal SSEGURO) throws Exception {
        Map m = 
            new PAC_IAX_PRODUCCION(usuario.getConnection("db01")).ejecutaPAC_IAX_PRODUCCION__F_GET_DATPOLIZA(SSEGURO);
        logger.debug("PRIMERA PARTE DE LA PANTALLA axisctr038---------------------------------------->" + 
                     m);
        return (Map)tratarRETURNyMENSAJES(request, m);
    }

    private Map dbGetCuTmador(HttpServletRequest request, 
                              UsuarioBean usuario) throws Exception {
        Map m = 
            new PAC_IAX_PRODUCCION(usuario.getConnection("db01")).ejecutaPAC_IAX_PRODUCCION__F_GET_TOMADORCCC();
        logger.debug("PRIMERA PARTE DE LA PANTALLA axisctr038---------------------------------------->" + 
                     m);
        return m;
    }

    /**
     * M�todo que llama a la funci�n pl correspondiente para cargar los ASEGURADOS de una p�liza seleccionada.
     * 
     * @param request
     * @param usuario
     * @param SSEGURO
     * @param NRIESGO
     * @param FECHA ACTUAL
     * @return
     * @throws Exception
     */
    private Map dbGetDatosEconomicos(HttpServletRequest request, 
                                     UsuarioBean usuario, BigDecimal SSEGURO, 
                                     BigDecimal NRIESGO, 
                                     Date FECHA) throws Exception {
        Map map;
        map = 
new PAC_IAX_DATOSCTASEGURO(usuario.getConnection("db01")).ejecutaPAC_IAX_DATOSCTASEGURO__F_OBTDATECON(SSEGURO, 
                                                                                                      NRIESGO, 
                                                                                                      FECHA);
        logger.debug("OBTIENE DATOS ECONOMICOS axisctr038---------------------------------------->" + 
                     map);
        return (Map)tratarRETURNyMENSAJES(request, map);
    }

    /**
    * M�todo que llama a la funci�n pl correspondiente para cargar los ASEGURADOS de una p�liza seleccionada.
    *
    * @param request
    * @param usuario
    * @param SPERSON
    * @param CEMPRES
    * @param CAGENTE
    * @return
    * @throws Exception
    */
    /*private BigDecimal dbEstCuentasBancarias(HttpServletRequest request, UsuarioBean usuario, BigDecimal SPERSON, BigDecimal CEMPRES, BigDecimal CAGENTE)
                throws Exception{
    Map map;
    map =
    new PAC_IAX_PERSONA(usuario.getConnection("db01")).ejecutaPAC_IAX_PERSONA__F_GET_ESTCUENTASBANCARIAS(SPERSON,CEMPRES,CAGENTE);
    logger.debug("CUENTAS BANCARIAS  axisctr038---------------------------------------->"+map);
    return (BigDecimal)tratarRETURNyMENSAJES (request, map);
    }*/


    /**
     * Lee los asegurados de la p�liza.
     * @param usuario
     * @return
     * @throws Exception
     */
    protected Map dbLeeAsegurados(UsuarioBean usuario) throws Exception {
        Map map = 
            new PAC_IAX_PRODUCCION(usuario.getConnection("db01")).ejecutaPAC_IAX_PRODUCCION__F_LEEASEGURADOS();
        logger.debug("DATOS ASEGURADOS  axisctr038---------------------------------------->" + 
                     map);
        return map;
    }

    /**
     * Lee los datos gestion de la poliza
     * @param usuario
     * @return
     * @throws Exception
     */
    protected Map dbLeeDatosGestion(UsuarioBean usuario) throws Exception {
        Map map = 
            new PAC_IAX_PRODUCCION(usuario.getConnection("db01")).ejecutaPAC_IAX_PRODUCCION__F_LEEDATOSGESTION();
        logger.debug("DATOS GESTION POLIZA  axisctr038---------------------------------------->" + 
                     map);
        return map;
    }

    /**
    * Lee los datos gestion de la poliza
    * @param usuario
    * @return
    * @throws Exception
    */
    /*protected Map dbGetCuentasBancarias(UsuarioBean usuario,  BigDecimal SPERSON, BigDecimal CEMPRES, BigDecimal CAGENTE) throws Exception{
        Map map = new PAC_IAX_PERSONA(usuario.getConnection("db01")).ejecutaPAC_IAX_PERSONA__F_GET_ESTCUENTASBANCARIAS(SPERSON,CEMPRES,CAGENTE);
        logger.debug("DATOS CUENTAS BANCARIAS  axisctr038---------------------------------------->"+map);
        return map;
    }*/

    /**
     * Lee los datos gestion de la poliza
     * @param usuario
     * @return
     * @throws Exception
     */
    protected Map dbGetTiposCuentas(UsuarioBean usuario) throws Exception {
        Map map = 
            new PAC_IAX_LISTVALORES(usuario.getConnection("db01")).ejecutaPAC_IAX_LISTVALORES__F_GET_LSTTIPOCUENTA();
        logger.debug("DATOS CUENTAS BANCARIAS  axisctr038---------------------------------------->" + 
                     map);
        return map;
    }

    /**
     * Inicializa los datos de la p�liza
     * @param usuario
     * @param SSEGURO
     * @return
     * @throws Exception
     */
    protected BigDecimal dbInicializaPoliza(HttpServletRequest request, 
                                            UsuarioBean usuario, 
                                            BigDecimal SSEGURO) throws Exception {
        Map map = 
            new PAC_IAX_PRODUCCION(usuario.getConnection("db01")).ejecutaPAC_IAX_PRODUCCION__F_SET_CONSULTAPOLIZA(SSEGURO);
        logger.debug("CUENTAS BANCARIAS  axisctr038---------------------------------------->" + 
                     map);
        return (BigDecimal)tratarRETURNyMENSAJES(request, map);
    }

    protected Map dbAceptar(HttpServletRequest request, UsuarioBean usuario, 
                            BigDecimal TIPO, String CUENTA) throws Exception {
        Map m = 
            new PAC_IAX_PERSONA(usuario.getConnection("db01")).ejecutaPAC_IAX_PERSONA__F_VALIDACCC(TIPO, 
                                                                                                   CUENTA);
        return m;
    }

    protected Map dbFinalizar(HttpServletRequest request, UsuarioBean usuario, 
                              BigDecimal SSEGURO, BigDecimal NRIESGO, 
                              Date FECHA_ACTUAL, BigDecimal IMPORTE, 
                              String CUENTA) throws Exception {
        // Map m = new PAC_IAX_SUP_FINAN(usuario.getConnection("db01")).ejecutaPAC_IAX_SUP_FINAN__F_TARIF_APORT_EXTRAORDINARIA(SSEGURO,NRIESGO,FECHA_ACTUAL,IMPORTE);
        Map m = 
            new PAC_IAX_SUP_FINAN(usuario.getConnection("db01")).ejecutaPAC_IAX_SUP_FINAN__F_APORTACION_EXTRAORDINARIA(SSEGURO, 
                                                                                                                       NRIESGO, 
                                                                                                                       FECHA_ACTUAL, 
                                                                                                                       IMPORTE, 
                                                                                                                       CUENTA);
        return m;
    }


    /**
     * M�todo que devuelve el SPERSON del primero de los tomadores
     * 
     * @param request
     * @param usuario
     * @return
     * @throws Exception
     */
    private BigDecimal dbGetSperson(HttpServletRequest request, 
                                    UsuarioBean usuario) throws Exception {
        Map map = 
            new PAC_IAX_PRODUCCION(usuario.getConnection("db01")).ejecutaPAC_IAX_PRODUCCION__F_LEETOMADORES();
        logger.debug("RECUPERA SPERSON  axisctr038---------------------------------------->" + 
                     map);
        List lista_tomadores = (List)tratarRETURNyMENSAJES(request, map);
        if (!isEmpty(lista_tomadores)) {
            return (BigDecimal)((Map)((Map)lista_tomadores.get(0)).get("OB_IAX_TOMADORES")).get("SPERSON");
        } else {
            return null;
        }

    }

    /**
     * M�todo que devuelve el SPERSON del primero de los tomadores
     * 
     * @param request
     * @param usuario
     * @return
     * @throws Exception
     */
    private Map dbLeeTomadores(HttpServletRequest request, 
                               UsuarioBean usuario) throws Exception {
        Map map = 
            new PAC_IAX_PRODUCCION(usuario.getConnection("db01")).ejecutaPAC_IAX_PRODUCCION__F_LEETOMADORES();
        logger.debug("RECUPERA TOMADORES axisctr038---------------------------------------->" + 
                     map);
        return map;


    }

    /**
     * Lee los datos de la simulacion
     * @param usuario
     * @return
     * @throws Exception
     */
    private Map dbTarifar(HttpServletRequest request, UsuarioBean usuario, 
                          BigDecimal SSEGURO, BigDecimal NRIESGO, 
                          java.sql.Date FECHA_ACTUAL, 
                          BigDecimal IMPORTE) throws Exception {
        Map map = 
            new PAC_IAX_SUP_FINAN(usuario.getConnection("db01")).ejecutaPAC_IAX_SUP_FINAN__F_TARIF_APORT_EXTRAORDINARIA(SSEGURO, 
                                                                                                                        NRIESGO, 
                                                                                                                        FECHA_ACTUAL, 
                                                                                                                        IMPORTE);
        logger.debug("DATOS GESTION POLIZA  axisctr038---------------------------------------->" + 
                     map);
        return map;
    }


    /**
     * Lee los datos de la simulacion
     * @param usuario
     * @return
     * @throws Exception
     */
    protected Map dbGetValorSimulacion(HttpServletRequest request, 
                                       UsuarioBean usuario, BigDecimal SSEGURO, 
                                       BigDecimal NRIESGO, Date FECHA_ACTUAL, 
                                       BigDecimal IMPORTE, 
                                       BigDecimal CCAUSIN) throws Exception {
        Map map = 
            new PAC_IAX_RESCATES(usuario.getConnection("db01")).ejecutaPAC_IAX_RESCATES__F_VALOR_SIMULACION(SSEGURO, 
                                                                                                            NRIESGO, 
                                                                                                            FECHA_ACTUAL, 
                                                                                                            IMPORTE, 
                                                                                                            CCAUSIN);
        logger.debug("DATOS GESTION POLIZA  axisctr038---------------------------------------->" + 
                     map);
        return map;
    }

    /**
     * Lee los datos de la simulacion
     * @param usuario
     * @return
     * @throws Exception
     */
    private Date fcGetFechaActual() throws Exception {

        java.util.Date today = new java.util.Date();
        java.sql.Date FECHA_ACTUAL = new java.sql.Date(today.getTime());
        return FECHA_ACTUAL;

    }
}

